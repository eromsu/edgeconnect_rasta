# This test case it is a simple test to check functionality of the jenkins-pipeline
#

*** Settings ***

# Libraries and resource files needed in this test
#
#   rasta.robot       Our core rasta keyword libraries and resource files
#   OperatingSystem   provides some useful keywords to interact with the OS (like to run a command
#                     or to create directories)
#
#Library    rasta.RASTA
Library    OperatingSystem
Library    Collections

Resource   rasta.robot


# Variable settings. We can use multiple ways to set variables, but a yaml file is
# preferred as it allows to easily create multiline variables including leading spaces/etc., list
# variables/etc.
Variables   config.yaml

*** Variables ***
${CASE}    <<CASENAME>>
${INSTANCE}   <<INSTANCENAME>>
${SLEEP}    2
# TODO: move to RESTCONF
${full_config_uri}    /api/running?deep
# TODO: see what we want to do with logs
#@{ncs_logs}    'ncs-java-vm.log'    'ncs-python-vm-xxx.log'    'audit.log'



*** Test Cases ***

Setup foofoo service
    Load Topology and connect to devices
    Sync NSO device config
    Retrieve pre-service configurations
    Create Service
    Retrieve post-service configurations
    Rasta Continue on Failure
    Verify Service through Config Diff

*** Keywords ***
Load Topology and connect to devices
    [Tags]  setup
    use testbed "${testbed}"
    connect to device "${nso}"

    # In this example we are leveraging a netsim environment where
    # the devices-under-test are created dynamically. In order to interact with them
    # we have created a kewyord to add them dynamically to the test environment
    #
    # Add devices "ce0;ce1;pe0;pe1" from NSO "${nso}" to testbed with credentials "admin"/"admin"
    # connect to device "ce0"
    # connect to device "ce1"
    #Note: pyats/unicon has issues connecting to a netsim xr device, so only considering ios
    #until we find a solution. this is only an issue with netsim, connecting to real devices
    #works just fine

Sync NSO device config
    Set NSO cli style to "${cli_style}"
    execute command "devices sync-from" on device "${nso}"

Retrieve pre-service configurations
    [Documentation]   Retrieve pre-service configurations
    Collect config from node "${nso}" in "${cfgdir}/${CASE}/nso-before.txt"
    #Collect logs "@{ncs_logs}" from server "${nso}" and store with prefix "logs-before-"

Retrieve post-service configurations
    [Documentation]   Retrieve post-service configurations
    Collect config from node "${nso}" in "${cfgdir}/${CASE}/nso-after.txt"
    #Collect logs "@{ncs_logs}" from server "${nso}" and store with prefix "logs-after-"
    #Dump files "@{ncs_logs}" diff between files with prefix "logs-before-" and "logs-after-" and store with prefix "logs-diff-"

Collect config from node "${node}" in "${file}"
    ${output} =   via NSO REST API retrieve "${full_config_uri}" from "${node}" as "json"
    ${output} =   Get From List    ${output}    1
    Create File    ${file}    ${output}

Verify Service through Config Diff
    [Documentation]   Calculate changes and compare to references
    Run    scripts/json-diff.sh ${cfgdir}/${CASE}/nso-before.txt ${cfgdir}/${CASE}/nso-after.txt ${cfgdir}/${CASE}/nso-diff.txt
    # Dump raw diff for reference
    Run    diff ${cfgdir}/${CASE}/nso-before.txt ${cfgdir}/${CASE}/nso-after.txt > ${cfgdir}/${CASE}/nso-diff-raw.txt
    ${output} =    Get File    ${cfgdir}/${CASE}/nso-diff.txt
    ${ref} =    Get File    ${cfgdir}/${CASE}/nso-ref.txt
    Log    Compare NSO changes to reference results.
    Run Keyword And Continue On Failure    Should be equal as strings    "${ref}"    "${output}"

Wait for reconcilliation
    [Documentation]   Sleep for few seconds to allow reconcilliation to take place
    Log    Sleep for few seconds to allow reconcilliation to take place
    Sleep    ${SLEEP}

Create Service
    [Documentation]   Create ipnet Service on NSO via REST
    [Tags]  create
    ${payload}=   Get File    ${cfgdir}/${CASE}/input.json
    via NSO REST API configure device "${nso}" at URI "${foofoo_service_create_uri}" using "POST" with "json" payload "${payload}"
